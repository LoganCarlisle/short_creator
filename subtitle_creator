import os
import ffmpeg
from faster_whisper import WhisperModel
import math
input_video = r"clip"
input_video_name = os.path.splitext(os.path.basename(input_video))[0]  # Get the file name without extension
ffmpeg_path = r"file_path"

output_directory = r"D:\VideoClips\EditedClips"

def transcribe(audio):
    model = WhisperModel("small")
    segments, info = model.transcribe(audio)
    language = info[0]
    print("Transcription language:", language)
    segments = list(segments)
    for segment in segments:
        print("[%.2fs -> %.2fs] %s" % (segment.start, segment.end, segment.text))
    return language, segments


def extract_audio():
    extracted_audio = os.path.join("D:\\VideoClips", f"audio-{input_video_name}.wav")  # Correctly format output path

    if not os.path.exists(input_video):
        print(f"Input video not found: {input_video}")
        return None

    try:
        stream = ffmpeg.input(input_video)
        stream = ffmpeg.output(stream, extracted_audio)

        ffmpeg.run(stream, cmd=ffmpeg_path, overwrite_output=True)
        print(f"Audio extracted to {extracted_audio}")
        return extracted_audio
    except ffmpeg.Error as e:
        if e.stderr:
            print("Error extracting audio:", e.stderr.decode())
        else:
            print("Error extracting audio: Unknown error occurred")
        return None
def format_time(seconds):

    hours = math.floor(seconds / 3600)
    seconds %= 3600
    minutes = math.floor(seconds / 60)
    seconds %= 60
    milliseconds = round((seconds - math.floor(seconds)) * 1000)
    seconds = math.floor(seconds)
    formatted_time = f"{hours:02d}:{minutes:02d}:{seconds:01d},{milliseconds:03d}"

    return formatted_time


def generate_subtitle_file(language, segments):
    subtitle_file = f"sub-{input_video_name}.{language}.srt"
    text = ""
    for index, segment in enumerate(segments):
        segment_start = format_time(segment.start)
        segment_end = format_time(segment.end)
        text += f"{str(index + 1)} \n"
        text += f"{segment_start} --> {segment_end} \n"
        text += f"{segment.text} \n"
        text += "\n"

    f = open(subtitle_file, "w")
    f.write(text)
    f.close()

    return subtitle_file
def add_subtitle_to_video(soft_subtitle, subtitle_file, subtitle_language):
    video_input_stream = ffmpeg.input(input_video)
    #output_video = f"output-{input_video_name}.mp4"
    #subtitle_track_title = subtitle_file.replace(".srt", "")
    output_video = os.path.join(output_directory, f"output-{input_video_name}.mp4")
    subtitle_track_title = subtitle_file.replace(".srt", "")

    if soft_subtitle:
        stream = (
            ffmpeg
            .output(
                video_input_stream,
                output_video,
                **{
                    "c": "copy",
                    "c:s": "mov_text",
                    "metadata:s:s:0": f"language={subtitle_language}",
                    "metadata:s:s:0": f"title={subtitle_track_title}"
                }
            )
            .global_args('-y')  # Overwrite output without asking
        )
    else:
        stream = ffmpeg.output(
            video_input_stream,
            output_video,
            vf=f"subtitles={subtitle_file}"
        )

    try:
        ffmpeg.run(stream, cmd=ffmpeg_path, overwrite_output=True)
        print(f"Subtitles added to video: {output_video}")
    except ffmpeg.Error as e:
        if e.stderr:
            print("Error adding subtitles:", e.stderr.decode())
        else:
            print("Error adding subtitles: Unknown error occurred")
def run():
    extracted_audio = extract_audio()
    if extracted_audio:
        language, segments = transcribe(audio=extracted_audio)
        subtitle_file = generate_subtitle_file(
            language=language,
            segments=segments
        )

        add_subtitle_to_video(
            soft_subtitle=False,
            subtitle_file=subtitle_file,
            subtitle_language=language
        )



run()
